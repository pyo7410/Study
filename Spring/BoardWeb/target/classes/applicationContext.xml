<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
		
	<!-- 클래스 path(base-package)에 있는 클래스들을 스캔하여 @Component가 설정된 클래스들을 자동으로 객체 생성한다. -->
	<!-- @Component 어노테이션이 붙은 클래스들을 일일이 <bean> 엘리먼트로 등록할 필요가 없다. -->
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<!-- AOP 관련 어노테이션들을 인식하고 용도에 맞게 처리 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- JdbcTemplate 객체가 사용할 DataSource 설정 -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:tcp://localhost/~/test" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean> -->	
	<!-- 외부 Properties 파일에 설정된 프로퍼티 이용 -->
	<!-- <context:property-placeholder> 엘리먼트로 프로퍼티 파일의 위치 등록 -->
	<!-- ${} 구문으로 프로퍼티 이름을 지정하면 프로퍼티 값으로 치환되어 실행 -->
	<context:property-placeholder location="classpath:config/database.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transacion advice 실습 -->
	<!-- 트랜잭션 관리 기능의 어드버이스는 직접 구현하지 않고 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동으로 생성 -->
	<!-- 즉, 트랜잭션 관리 어드바이스 객체에 클래스 이름이나 메소드를 확인 할 수 없다. 단지 생성되는 어드바이스의 아이디를 id 속성으로 -->
	<!-- 어드바이스 객체가 사용할 트랜잭션 관리자를 transaction-manager 속성으로 지정할 뿐 -->
	<!-- txAdvice라는 어드바이스가 앞에서 설정한 txManager를 이용하여 트랜잭션을 관리한다는 의미 -->
	<!-- <tx:attributes>의 자식 엘리먼트로 <tx:method> 엘리먼트를 이용하여 트랜잭션을 적용할 메소드를 지정한다. -->
	<!-- 아래 설정을 get으로 시작하는 모든 메소드는 read-only 즉, 읽기 전용으로 처리되어 트랜잭션 관리 대상에서 제외하고 나머지 메소드들은 트랜잭션 관리에 포함한 것 -->
	<!-- BoardServiceImpl, BoardDAOSpring, BoardServiceClient 클래스 참고 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz.board..*(..))" />
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- AOP 설정 -->
	<!-- LogAdvice 사용 -->
	<!-- <bean id="log" class="com.springbook.biz.common.LogAdvice"></bean> -->
	<!-- Log4jAdvice 사용 -->
	<!-- <bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean> -->
	<!-- <aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" /> -->
		<!-- 포인트컷 실습 -->
		<!-- 포인트컷은 <aop:pointcut> 엘리먼트로 선언, id 속성으로 포인트컷을 식별하기 위한 유일한 문자열을 선언한다. 이 아이디가 나중에 포인트컷을 참조할 때 사용 -->
		<!-- expression 속성의 값을 어떻게 설정하는냐에 따라 필터링되는 메소드가 달라진다. 여기서는 get으로 시작하는 메소드만 포인트컷으로 설정 -->
		<!-- <aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" /> -->
		<!-- 트랜잭션 설정에서는 aop:advisor를 사용한다. aop:aspect와는 같은 의미이다. -->
		<!-- <aop:aspect ref="log"> -->
			<!-- LogAdvice 사용 -->
			<!-- <aop:before pointcut-ref="allPointcut" method="printLog" /> -->
			<!-- Log4jAdvice 사용 -->
			<!-- <aop:before pointcut-ref="allPointcut" method="printLogging" /> -->
			<!-- 포인트컷 실습 -->
			<!-- get으로 시작하는 메소드만 포인트컷으로 설정 -->
			<!-- bean을 뭐로 설정했는지 주의하고 메소드 잘 쓸것 -->
			<!-- aop:before, aop:after, aop:after-returning, after:throwing, after:around. -->
			<!-- before은 해당 메소드 수행 전, after는 해당 메소드 수행 후 실행 시킨다. -->
			<!-- 아래에 실습있음. -->
			<!-- <aop:before pointcut-ref="getPointcut" method="printLogging" />	
		</aop:aspect>
	</aop:config> -->
	
	<!-- Before 어드바이스 실습 -->
	<!-- 해당 메소드 수행 전 실행 -->
	<!-- <bean id="before" class="com.springbook.biz.common.BeforeAdvice" />
	
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		
		<aop:aspect ref="before">
			<aop:before pointcut-ref="allPointcut" method="beforeLog" />
		</aop:aspect>
	</aop:config> -->
	
	<!-- After Returning 어드바이스 실습 -->
	<!-- 해당 메소드 수행 결과로 생성된 데이터를 리턴하는 시점에 동작 -->
	<!-- <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice" />
	
	<aop:config>
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
		
		<aop:aspect ref="afterReturning"> -->
			<!-- 바인드 변수가 자바코드에 추가됬다면 반드시 바인드 변수에 대한 매핑 설정을 추가 해주어야 한다. 이때, <aop:after-returning>의 returning 속성을 사용한다. -->
			<!-- 비즈니스 메소드가 리턴한 결괏값을 returnObj라는 바인드 변수에 바인드 하라는 설정이다. -->
			<!-- 반드시 바인드 변수의 이름과 같아야 한다. -->
			<!-- <aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj" />
		</aop:aspect>
	</aop:config> -->
	
	<!-- After Throwing 어드바이스 실습 -->
	<!-- 해당 메소드가 실행되다가 예외가 발생하는 시점에 동작 즉, 예외 처리 어드바이스를 설정할 때 사용 -->
	<!-- <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice" /> -->
	<!-- After 어드바이스 실습 -->
	<!-- 예외 발생 여부에 상관없이 무조건 수행 -->
	<!-- <bean id="after" class="com.springbook.biz.common.AfterAdvice" /> -->
	
	<!-- <aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		
		<aop:aspect ref="afterThrowing"> -->
			<!-- 바인드 변수가 자바코드에 추가됬다면 반드시 바인드 변수에 대한 매핑 설정을 추가 해주어야 한다. 이때, <aop:after-throwing>의 throwing 속성을 사용한다. -->
			<!-- 비즈니스 메소드가 리턴한 결괏값을 exceptObj라는 바인드 변수에 바인드 하라는 설정이다. -->
			<!-- 반드시 바인드 변수의 이름과 같아야 한다. -->
			<!-- <aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj"/>
		</aop:aspect> -->
		
		<!-- <aop:aspect ref="after">
			<aop:after pointcut-ref="allPointcut" method="finallyLog"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- Around 어드바이스 실습 -->
	<!-- 클라이언트의 메소드 호출을 가로채어 클라이언트가 호출한 비즈니스 메소드가 실행되기 전에 사전 처리 로직을 수행가능하고 -->
	<!-- 비즈니스 메소드가 모두 실행되고 나서 사후 처리 로직을 수행할 수 있다. -->
	<!-- 자세한 사항은 AroindAdvice 클래스 코드 참고 -->
	<!-- Around 어드바이스는 다른 어드바이스와는 다르게 반드시 ProceedingJoinPoint 객체를 매개변수로 받아야 한다. -->
	<!-- ProceedingJoinPoint 객체는 비즈니스 메소드를 호출하는 proceed() 메소드를 가지고 있으며 JoinPoint를 상속했다. -->
	<!-- <bean id="around" class="com.springbook.biz.common.AroundAdvice" />
	
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" />
	 -->

	<!-- id는 없어도 되나 꼭 하나만, class는 반드시 bean에 포함되어야한다. -->
	<!-- // SamsungTV.java의 initMethod(), destroyMethod()의 처리 -->
	<!-- init-method : 컨테이너가 구동되어 SamsungTV 객체가 생성된 직후에 호출 -->
	<!-- destroy-method : SamsungTV 객체가 삭제되기 직전에 호출 -->
	<!-- <bean id = "tv" class="com.springbook.biz.SamsungTV" init-method="initMethod" destroy-method="destroyMethod"/> -->
	
	<!-- 객체를 즉시 생성하는 것이 아닌 해당 객체를 사용되는 시점에 객체를 생성한다 true로 설정해야한다! -->
	<!--<bean id = "tv" class="com.springbook.biz.SamsungTV" lazy-init="true"/>-->
	
	<!-- scope 속성값은 기본이 "singleton"이다. 이는 해당 bean이 스프링 컨테이너에 의해 단 하나만 생성 되어 운용되도록한다. 즉, 객체호출이 여러번 있어도 하나의 객체만을 사용하게 됨 -->
	<!-- scope 속성값이 "prototype"이면 해당 bean이 요청될 때마다 매번 새로운 객체를 생성하여 반환한다. -->
	<!-- <bean id = "tv" class="com.springbook.biz.SamsungTV" scope="singleton"/> -->
	<!-- <bean id = "tv" class="com.springbook.biz.SamsungTV" scope="prototype"/> -->
	
	
	<!-- Dependency Injection 실습 -->
	<!-- construct-arg를 사용하여 생성자 인자로 전달할 객체의 아이디를 ref 속성으로 참조 -->
	<!-- 스프링은 기본적으로 bean에 등록된 순서대로 객체를 생성한다. 하지만 생성자 인젝션으로 주입될 경우 주입될 객체가 먼저 생성되어야 한다. -->
	<!-- construct-arg가 여러개인 경우 여러개를 생성하면 되고 객체와 달리 일반 값들은 value 속성을 이용하여 전달한다. -->
	<!-- 생성자가 여러개 오버로딩 되있더라도 construct-arg에 매칭되는 생성자가 자동으로 실행된다! -->
	<!-- <bean id="tv" class="com.springbook.biz.SamsungTV"> -->
		<!-- <constructor-arg ref="sony"></constructor-arg> -->
		<!-- <constructor-arg ref="apple"></constructor-arg>
		<constructor-arg value="2700000"></constructor-arg> -->
		<!-- 생성자가 여러개 오버로딩 되어있어 어떤 생성자를 호출해야할지 모른다면 index 속성을 이용해 어떤 값이 몇번째 매개변수로 매핑되는지 지정할 수 있다. -->
		<!-- index는 0부터 시작 -->
		<!--
		<constructor-arg index="0" ref="sony"></constructor-arg>
		<constructor-arg index="1" value="2700000"></constructor-arg>
		-->
	<!-- </bean> --> 
	
	<!-- Setter Injection을 사용하려면 property 엘리먼트를 사용해야한다. -->
	<!-- name 속성값이 호출하고자 하는 메소드 이름이다. 즉, name의 속성값이 speaker일 경우 호출되는 메소드는 setSpeaker()이다. -->
	<!-- 즉, 변수 이름에서 첫 글자를 대문자로 바꾸고 앞에 "set"을 붙인 것이 호출할 메소드 이름이다. -->
	<!-- 
	<bean id="tv" class="com.springbook.biz.SamsungTV">
		<property name="speaker" ref="apple"></property>
		<property name="price" value="2700000"></property>
	</bean>
	 -->
	
	
	<!-- Setter 인젝션 설정 시 p 네임스페이스를 이용하면 좀 더 효율적 -->
	<!-- p:변수명-ref="참조할 객체의 이름이나 아이디" -->
	<!-- p:변수명="설정할 값" -->
	<!-- <bean id="tv" class="com.springbook.biz.SamsungTV" p:speaker-ref="sony" p:price="2700000" /> -->
	
	<!-- 
	<bean id="sony" class="com.springbook.biz.SonySpeaker"></bean>
	<bean id="apple" class="com.springbook.biz.AppleSpeaker"></bean>
	 -->
	 
	<!-- Collection 객체 실습 -->
	<!-- List -->
	<!-- 
	<bean id="collectionBean" class="com.springbook.biz.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행담동</value>
			</list>
		</property>
	</bean>
	-->
	<!-- Set (List와 같으나 중복 허용 X) -->
	<!-- 
	<bean id="collectionBean" class="com.springbook.biz.CollectionBean">
		<property name="addressList">
			<set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행담동</value>
				<value>서울시 성동구 행담동</value>
			</set>
		</property>
	</bean>
	 -->
	<!-- Map -->
	<!-- 
	<bean id="collectionBean" class="com.springbook.biz.CollectionBean">
		<property name="addressList">
			<map value-type="java.lang.String">
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 성동구 행담동</value>
				</entry>
			</map>
		</property>
	</bean>
	 -->
	 
	 <!-- 어노테이션과 XML 설정 병행 실습 -->
	 <!-- 클라이언트가 요청할 LgTV는 @Component로 처리하고 의존성 주입역시 @Autowired로 처리 -->
	 <!-- 변경될 Speaker만 bean에 등록하여 자바 코드 수정 없이 XML 수정만으로 Speaker를 교체 가능 -->
	 <!-- 즉, 변경되지 않는 객체는 어노테이션을 설정하고 변경될 가능성이 있는 객체는 XML 설정으로 사용 -->
	 <!-- <bean class="com.springbook.biz.SonySpeaker"></bean> -->
	 
	 <!-- JdbcTemplate 클래스 bean 등록 실습 -->
	 <!-- BoardDAOSpring 클래스 참고 -->
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<property name="dataSource" ref="dataSource" />
	 </bean>
	
</beans>
