#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;


// uid? bid? ??? ?? ??? ??
// *? ?? ???? ??
bool isEqual(string uid, string bid)
{
    int len = uid.length();

    for (int i = 0; i < len; ++i)
    {
        if (bid[i] == '*')
        {
            continue;
        }
        if (uid[i] != bid[i])
        {
            return false;
        }
    }
    return true;
}

// banned_id? ????? ??
bool check[9];
// user_id ??? ??? ??
int user_size;
// banned_id? ??? ??
int banned_size;
// ??? ??? banned_id? ??? user_id? 0?? ??? index?? ??
// ??? index? ??? ???? ??? ?? ??
// ex) user_id   = "frodo", "fradi", "crodo", "abc123", "frodoc" ? ??
//     banned_id = "*rodo", "******", "******" ??
//     frodo abc123 frodoc || frodo frodoc abc123? ????
//     ?? index?? 034? 043 ?? ?? ???? ???? 034, 034? ??? ??? ??? ? ??.
set<string> foundID;

// index : banned_id? ???
// position : banned_id? ??? user_id? ???
void findID(int index, string position, vector<string> user_id, vector<string> banned_id)
{
    // index? banned_id ??? ????
    if (index == banned_size)
    {
        // set? ?? ??? ??? ?? banned_id? ??? user_id? ???? sort
        // ex) frodo, crodo, abc123 | crodo, frodo, abc123
        sort(position.begin(), position.end());
        // set? ??, ?? ????? ??? ???.
        foundID.insert(position);
        return;
    }

    // ban?? id
    string bid = banned_id[index];

    for (int i = 0; i < user_size; ++i)
    {
        // user id
        string uid = user_id[i];

        // ?? bid? uid? ??? ??? ??? ??? ??.
        if (uid.length() != bid.length())
        {
            continue;
        }

        // ?? banned_id? ??? user_id? ?? ?? ??‰??? ??????.
        if (check[i])
        {
            continue;
        }

        // uid? bid? ???
        if (isEqual(uid, bid))
        {
            // ?? uid? bid? ??‰?? ??
            check[i] = true;

            // ?? index? banned_id? ??? uid? ?????
            // ?? index? banned_id? ??? uid? ????.
            // position ???? ?? uid? ???? ?? ?? uid? ??‰?? ????.
            findID(index + 1, position + to_string(i), user_id, banned_id);

            // ?? ??? ???? ???
            // ?? uid? ??? ‰?? ?? ??? ?‰??? ???
            // ?? user_id? banned_id? ?????.
            // "frodo", "fradi", "crodo", "abc123", "frodoc" ? ??
            // ex) frodo, crodo, abc123 ? fradi, crodo, abc123? ???.
            //     ?, frodo ??? ?? fradi? ???? ?? ???? ?? banned_id?
            //     ??? ??? ???? ??.
            check[i] = false;
        }
    }
}

int solution(vector<string> user_id, vector<string> banned_id) {
    int answer = 0;

    user_size = user_id.size();
    banned_size = banned_id.size();
    
    // banned_id? ? ???? 0
    // banned_id? ??? user_id? ???? ??? ""
    findID(0, "", user_id, banned_id);

    answer = foundID.size();

    return answer;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int n, m;
    cin >> n >> m;

    vector<string> user_id(n);
    vector<string> banned_id(m);
    for (int i = 0; i < n; ++i)
    {
        cin >> user_id[i];
    }

    for (int i = 0; i < m; ++i)
    {
        cin >> banned_id[i];
    }

    cout << solution(user_id, banned_id) << endl;
}